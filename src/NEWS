February 1, 2014
  Version 1.3.1 (beta) released.
  * Added a demo of CloudI scaling a game server (a MUD) that is 20+ years old
    (see https://github.com/okeuday/sillymud)
  * Added the service configuration option count_process_dynamic to
    dynamically adjust the number of service processes based on the
    incoming service request rate
    * The hibernate service configuration option can provide
      rate based service hibernation now
  * The C++ CloudI API can provide backtrace information from
    CloudI::API::backtrace() when configured using --with-cxx-backtrace
  * A few of the new internal service functions:
    * cloudi_service_api:service_subscriptions/2
    * cloudi_service:recv_asyncs/4
    * cloudi_service:source_subscriptions/2
    * cloudi_service:context_options/1
    * cloudi_service:environment_transform/1
    * cloudi:trans_id_age/1
  * The cloudi module can use lazy destination refresh methods and works best if
    you update the destination data with the cloudi:destinations_refresh/2
    function
  * Latency of the following services was reduced:
    * cloudi_service_http_cowboy
    * cloudi_service_http_elli
    * cloudi_service_tcp
  * Fixed cloudi_service_quorum and added a byzantine mode
  * Added the cloudi_service_router internal service
  * The cloudi_service_filesystem can refresh its data after a
    configured time period
  * Now CloudI has separate repositories for each CloudI Erlang application
    if you want only internal service support with simple rebar integration
    (see https://github.com/CloudI/cloudi_core#readme)
  * The service Erlang application is provided to make service creation
    a bit less complex (see https://github.com/CloudI/service)
  * The automatic loading of an internal service can be disabled with the
    automatic_loading service configuration option set to false
    (see the hello_world5 example to understand why)
  * Service configuration now can use a proplist format, if you dislike
    the tuple format
    (see https://github.com/CloudI/CloudI/blob/master/examples/hello_world5/apps/hello_world5/src/hello_world5_app.erl#L57 or
     https://github.com/CloudI/CloudI/blob/master/src/lib/cloudi_core/src/cloudi_service_api.erl#L186)
  * Various bugfixes, small additions, and documentation improvements

October 18, 2013
  Version 1.3.0 (beta) released.
  * backwards compatibility difference:
    * CloudI Service API function services_add now returns a list of
      service UUIDs which can then be used in the other CloudI Service API
      functions (see the API HTML documentation or the
      cloudi_service_api module for details)
  * cassandra support was added by Mahesh Paolini-Subramanya
  * elasticsearch support for mapping and aliases was added
    by Mahesh Paolini-Subramanya
  * A service name pattern matching bug was fixed after being reported
    by Anton Ryabkov (an unsubscribe now removes a cpg group entry, if
    the group is empty, to avoid shadowing a pattern match)
  * CloudI API function cloudi_service:mcast_async_active was added
  * All the included internal CloudI services are now separate Erlang/OTP
    applications, to provide better management of their dependencies
  * The hello_world4 example was added to show how an Erlang/OTP release with
    CloudI can be created with relx
  * The hello_world3 example (rebar usage) was simplified,
    (rebar's HEAD is currently broken, refer to example README for details)
  * The service configuration options monkey_latency and monkey_chaos were
    added to provide a way of changing service performance and/or stability 
    for evaluating system resilience during service problems
    (http://techblog.netflix.com/2011/07/netflix-simian-army.html)
  * cloudi_service_http_cowboy had a few additions:
    * multipart support was added
    * content_types_accepted, set_x_forwarded_for, and status_code_timeout
      are configuration options
    * "status" key usage in ResponseInfo provides the HTTP status, as with
      normal HTTP protocol responses
  * A few new internal services were added:
    * cloudi_service_db_cassandra
    * cloudi_service_db
    * cloudi_service_tcp
    * cloudi_service_udp
    * cloudi_service_quorum
  * Various bugfixes, small additions, and documentation improvements

August 9, 2013
  Version 1.2.5 (beta) released.
  * elasticsearch integration was added in cloudi_service_db_elasticsearch.
  * External service configuration strings provided for the executable
    file path, the executable command line arguments, and the executable
    environment variables, now can expand environment variables set in the
    shell executing the Erlang VM (e.g., "$USER" or "${USER}" syntax).
  * Internal services now have a few more service configuration options:
    * hibernate - always makes the service processes hibernate to conserve
      memory by doing extra garbage collection processing
    * reload - will automatically reload the service module or all modules
      within a service application when the beam file is updated
  * Both external and internal services can set the scope
    service configuration option to give service name lookups and subscriptions
    a separate scope, minimizing contention when using an immediate destination
    refresh method.
  * Tests with common test, eunit, and PropEr are now used to validate the
    build.  An initial common test was added to test cloudi_service_db_pgsql.
  * The cloudi Erlang module received fixes so that it is a better match to the
    subset of the CloudI API (the cloudi_service Erlang module) it implements.
  * The services_search function was added to the CloudI Service API which
    returns the services that have subscribed to a service name.
  * cloudi_service:service_name_parse/2 was added to make it simpler to
    parse service name patterns.
  * The cloudi_core Erlang application is now the only dependency required
    when including CloudI in an Erlang release.  See the hello_world2
    example for details.
  * rebar integration for using the CloudI repository as a rebar dependency
    was added.  See the hello_world3 example for details.
  * Added a lot of configuration validation to prevent any problems with
    invalid configuration data for services, ACLs, etc.
  * Small fixes and additions were added to the websockets integration within
    cloudi_service_http_cowboy.  use_client_ip_prefix is a new option
    within cloudi_service_http_cowboy.
  * cloudi_service_http_elli was added to provide elli integration.
    More load testing is required to determine how it compares to
    cloudi_service_http_cowboy.
  * ZeroMQ detection on OSX was fixed.

June 20, 2013
  Version 1.2.4 (beta) released.
  * The external service "local" (i.e., "default") protocol configuration
    option has been fixed and was tested on OSX successfully.  The problem was
    with the unix domain socket initialization, so it doesn't affect the
    loadtest results done for the 1.2.2 release
    (see src/tests/http_req/loadtest/results_v1_2_2/201306_summary.pdf).
    The default configuration external service protocol configuration, as well
    as the quickstart remain with the "tcp" option, to avoid blocking
    people that are not concerned about the efficiency benefits and give
    more time for testing it.
  * WebSockets support was added to the cloudi_service_http_cowboy
    internal service.  To handle websocket connections, just use the
    "{use_websockets, true}" configuration option, as shown for port 6464
    within the default configuration.  The example is at:
    src/tests/http_req/public_html/websockets.html .
  * Various fixes were added for the R16B01 release (crypto application usage)
  * cowboy was updated to 0.8.6
  * The cloudi_service_api module was added so that the CloudI Service API
    can be accessed within the same VM with Erlang function calls
    (the service providing JSON-RPC and HTTP integration for the CloudI
     Service API had a name change from cloudi_service_api to
     cloudi_service_api_requests)
  * Two examples of different ways to release Erlang applications with
    CloudI exist in the examples directory as hello_world1 and hello_world2.
    hello_world1 shows how to let CloudI run your Erlang source code as a
    service, while hello_world2 shows you a basic Erlang release
    with external source code that has CloudI as a dependency.
  * Infrequent use cases of the internal service init function required some
    fixes to prevent errnoeous usage.  The functions send_sync and recv_async
    should not be used within an internal service init function, similar to
    the restriction on gen_server:call for the gen_server OTP/Erlang
    behaviour (you can always send a message to self() and handle it within
    the cloudi_service_handle_info/3 to utilize these functions).

June 8, 2013
  Version 1.2.3 (beta) released.
  * Added internal service purging when services are removed.
    The service module, or service application modules are purged after the
    service has been stopped, and the service applications (if any were used)
    has been stopped.  The functionality works with modules, applications and
    releases (within a .script file).  When applications are stopped and
    purged, only applications which are not dependencies for other running
    applications are removed.
  * Focused on bugs/fixes, mainly for OSX.  The external service "local" 
    protocol configuration option did not work properly on some installations
    of OSX, so the default CloudI configuration file now uses the "tcp"
    protocol configuration option (to be the same as releases before 1.2.2).
    The problem with the "local" protocol configuration option may be limited
    to slower machines (the problem is caused by execution spending too much
    time within a socket accept function call within an Erlang NIF).
    The "local" protocol configuration option on OSX will be addressed in a
    later release.

June 1, 2013
  Version 1.2.2 (beta) released.
  * Performance was improved further for external services with the addition
    of UNIX domain socket support as the "local" protocol.  The python_c
    CloudI API now has minimal latency.  The Erlang, C/C++, and Java CloudI
    APIs now have similarly low latency (20-40ms latency mean max,
    130-170ms latency max sample, for 20k connections at 10k req/s with the
    "local" protocol).  Now all the CloudI API implementations have been
    modified to send the request response before an exception is thrown to
    avoid imposing any extra request latency.
  * v1 UUIDs now have the correct variant bits set.  This fix makes the UUIDs
    backwards incompatible (if older UUIDs have been stored in a database).
  * Prevously, external service buffer sizes where assigned after being doubled.
    Now, that is no longer the case.  If that is a concern, make sure to double
    your configured buffer size (specified in the external service
    configuration).
  * Problems with the CloudI database services have now been fixed.  It is now
    true that the cloudi_service_init/3 self() process is the Dispatcher
    Erlang process used in future service function calls.  That will remain
    true in the future to maintain consistency with OTP behaviours.
    However, it is mainly for proper link/monitor creation, it is still
    best to use cloudi_service:self/1 when retrieving the service's Erlang
    process.
  * Added the "cloudi" module for Erlang usage of CloudI services within
    external Erlang processes.
  * Added the "cloudi_x_" scope (i.e., namespace) prefix to all external
    CloudI dependencies so that it is easier to include CloudI with other
    Erlang applications.  This change will impact any Erlang applications
    that currently use CloudI and CloudI external dependencies, but have not
    yet included their own version of the external dependencies.
  * Added proper support for loading Erlang applications and Erlang releases
    that include a CloudI service module.
  * Added newest/oldest destination refresh method options.
  * Now external service configuration can use the "default" atom for either
    the protocol and/or the buffer size.  The default protocol is the new
    "local" protocol and the default buffer size is currently 16384 bytes
    (Linux localhost (inet) MTU) but may change in the future based on
    further testing.

March 30, 2013
  Version 1.2.1 (beta) released.

  * Performance issues with the version 1.2.0 release were addressed here.
    It became clear after loadtesting that using a single Erlang process
    instead of two Erlang processes for each internal service caused much
    more latency under heavy load for internal services that receive a
    large amount of throughput.  While this may be an obvious conclusion,
    the latency was judged to be significant after loadtesting, so duo_mode
    was added as an internal service configuration option to provide a
    service with two Erlang processes instead of a single Erlang process
    (which provides performance similar to what was seen previous to
     version 1.2.0, but with slightly less latency, caveat: python_c
     suffered due to changes for the request timeout adjustment).
    The duo_mode option being set to true makes sure to provide an Erlang
    process for receiving service requests while the main Erlang process
    handles sending service requests, so that the service messaging flow
    is able to more fully exploit the Erlang VM scheduling
    (i.e., duo_mode is a duplex communication mode).
  * The exception handling overhead has become a source of latency under load
    when using the request_timeout_adjustment.  The request_timeout_adjustment
    being set to false avoids the extra latency for all CloudI API
    implementations except python_c (so the python_c performance gains
    were sacrificed due to usage of python exception handling, with the
    version 1.2.0 release).  So, the python_c latency will be addressed
    in the next release.
  * Added more service configuration options:
      * request_pid_uses, request_pid_options, info_pid_uses, info_pid_options -
        to provide more control over internal service garbage collection
        characteristics
      * duo_mode - to provide better performance for high-throughput internal
        services
      * response_timeout_adjustment - to avoid latency typical with the
        erlang:cancel_timer/1 function call
  * cowboy was updated to 0.8.2 and misultin was removed
  * loadtests were done to verify the reduced latency and to test the new
    service configuration options
    (results+config are at src/tests/http_req/loadtest/results_v1_2_1/)
  * ZeroMQ integration received more testing and changes to make it more robust

February 19, 2013
  Version 1.2.0 (beta) released.

  * Erlang >= R15B01 is now required due to callback/behavior changes
  * misultin was removed, cowboy now provides better functionality
    (misultin was also broken due to parameterized modules usage)
    cowboy was updated to 0.8.0
  * The documentation and CloudI source code changes so that "job" is no
    longer used to refer to services.  Now "service" is used consistently
    to help prevent confusion.  This change means that Erlang services
    (i.e., internal services) must now use the cloudi_service behavior
    instead of the cloudi_job behavior and the callback names reflect the
    same change.  The CloudI Job API is now referred to as the
    CloudI Service API.
  * A Quick Start and API documentation was added to help people
    learn about CloudI
  * A minor CloudI API change occured that affects Erlang services:
    cloudi_service:recv_async now always returns
    {ResponseInfo, Response, TransId} to be consistent with
    functionality in external services
  * Important bugfixes and improvements are included in this release
      * cloudi_service:unsubscribe will now properly unsubscribe a single
        instance of the service name pattern
      * Many improvements to internal services and
        the python_c external services
      * the ZeroMQ integration service has been fixed
      * the CloudI Service API had some minor issues fixed
      * the flood and messaging tests had some fixes
      * the bug with ACL string usage (from 1.1.1) was fixed
  * The request_timeout_adjustment service configuration option was added
    to make all service requests have their timeout decremented by the
    service request handler's execution time (defaults to false)
  * ZeroMQ v3 is now the default version if it is enabled
    (version 3.2.2 is used, if it isn't already installed)

February 4, 2013
  Version 1.1.1 (beta) released.

  * use patterns instead of prefixes for ACL strings
  * add the following destination refresh methods:
    immediate_furthest, lazy_furthest,
    immediate_local, lazy_local,
    immediate_remote, and lazy_remote
  * build system fixes and documentation fixes for installation
  * fix CloudI API uuids to be completely standard v1
  * fix external service queuing during initialization

October 30, 2012
  Version 1.1.0 (beta) released.

  * multiple loadtests to show the performance of all supported programming
    languages with the two supported HTTP servers, receiving 10,000 requests/sec
  * support for the cowboy HTTP server was added, which provides a
    significant reduction in HTTP request latency for Erlang services
    (based on the loadtest results)
  * Python with C integration provides a more efficient Python CloudI API
    (at least a 400% speedup, based on the loadtest results when using the
     Python module "cloudi_c" instead of "cloudi")
  * OSX configuration and compilation now works without problems
  * recv_async within the CloudI API can now choose whether to consume the
    response it returns
  * the hexpi test was abstracted to create the cloudi_job_map_reduce
    Erlang behaviour for fault-tolerant processing of iterative algorithms
  * various bug fixes for the tests
  * source code organizational improvements

June 24, 2012
  Version 1.0.0 (beta) released.

  * loadtest to show performance of various languages under load
    (results/config at src/tests/http_req/loadtest/)
  * HTTP support is now improved after tweaks during loadtesting
  * virtual host option in HTTP support
  * a few bugfixes

April 14, 2012
  Version 0.2.0 rc2 (beta) released.

  * many bugfixes
  * messaging test is now implemented in Erlang, C++, Ruby, Java, and Python
  * added alternative function pointer parameters for C++ CloudI API usage
    so that there is no need to create std::string objects

March 26, 2012
  Version 0.2.0 rc1 (beta) released.

  * support for Erlang R15
  * added support for using service name patterns
    (i.e., names that include the "*" wildcard character)
  * added priority queueing to Erlang services
  * added timeout handling to expire queued requests and now update the request
    timeout based on the time spent queued
  * added log output redirection with automatic partition tolerance
    (i.e., redirect local log output to a remote node and if contact with the
     remote node is lost, log locally until the connection is reestablished)
  * added floating point usage for configuring process and thread counts
    (so that it represents a ceil for numbers > 1.0 or
     a round for numbers < 1.0 when using it as a multiple of the
     number of cores (i.e., Erlang VM scheduler threads))
  * added service options to the CloudI configuration so that typical
    defaults are easily modified
  * other fixes and enhancements (see ChangeLog)

December 12, 2011
  Version 0.1.9 (alpha) released.

  * added request_info/response_info parameters to CloudI messages
  * added the priority parameter to CloudI messages (-128 high to 127 low)
  * new C++ CloudI API (as an alternative to the C CloudI API)
  * prevent CloudI logger flooding from misbehaving services
  * other fixes and enhancements (see ChangeLog)

September 6, 2011
  Version 0.1.8 (alpha) released.
  Changes for HTTP support and robust C API usage.

June 23, 2011
  Version 0.1.7 (alpha) released.
  More build system improvements.

May 14, 2011
  Version 0.1.6 (alpha) released.
  Many build system improvements.

April 25, 2011
  Version 0.1.5 (alpha) released.
  The Job API is finalized with using UUIDs for jobs_remove() and the addition
  of the jobs() request.

April 15, 2011
  Version 0.1.4 (alpha) released.
  The release includes many changes to make the 0.1.x source code robust.
  The Job API now exists with a JSON-RPC interface over HTTP
  (in version 0.0.10 this was the API).  The Job API facilitates dynamic
  configuration of all CloudI functionality.

February 23, 2011
  Version 0.1.0 (alpha) rewrite is now available and
  many changes occurred between the CloudI version 0.0.10 and version 0.1.0.
  The changes are summarized below:
  
  * CloudI is now a naturally master-less distributed system
    (i.e., requires no special configuration or redundancy)
  * messaging can occur between services (i.e., jobs) which
    may exist on other CloudI nodes
  * all service (i.e., job) names rely on strings rather than dynamic atoms,
    lookups use the trie data structure for efficiency close to the performance
    of the process dictionary (the fastest Erlang data structure)
  * cnodes are no longer used for external service (i.e., job) communication,
    instead sockets are used for each thread (either UDP or TCP can be used)
  * external services (i.e., jobs) are no longer implemented in dynamic
    libraries but are instead implemented in executables.  this change makes
    running various VMs or interpreters easy and avoids dynamic library link
    dependency problems with various version dependencies
    (i.e., helps support Java, Python, etc.)
  * HTTP can be used to call services, but JSON-RPC is not supported like it
    was in 0.0.10 (support for JSON-RPC will be added again soon)
  * a normal autotools/rebar build system is used that doesn't attempt to
    install critical dependencies locally (it just requires that they exist)
  * restarting stopped (e.g., SIGSTOP) OS processes is not implemented in
    0.1.0 (but may be added back, as necessary)

March 26, 2010
  "CloudI: A Cloud as an Interface (EXPANDED)"
  Presentation at the Erlang Factory, San Francisco Bay Area, California, USA
  Version 0.0.9 (alpha)

November 12, 2009
  "CloudI: A Cloud as an Interface"
  Presentation at the Erlang User Conference, Stockholm, Sweden
  Version 0.0.8 (alpha)

