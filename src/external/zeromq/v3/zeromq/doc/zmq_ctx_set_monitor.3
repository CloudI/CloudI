'\" t
.\"     Title: zmq_ctx_set_monitor
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 06/05/2012
.\"    Manual: 0MQ Manual
.\"    Source: 0MQ 3.2.0
.\"  Language: English
.\"
.TH "ZMQ_CTX_SET_MONITOR" "3" "06/05/2012" "0MQ 3\&.2\&.0" "0MQ Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
zmq_ctx_set_monitor \- register a monitoring callback
.SH "SYNOPSIS"
.sp
\fBint zmq_ctx_set_monitor (void \fR\fB\fI*context\fR\fR\fB, zmq_monitor_fn \fR\fB\fI*monitor\fR\fR\fB);\fR
.SH "DESCRIPTION"
.sp
The \fIzmq_ctx_set_monitor()\fR function shall register a callback function specified by the \fImonitor\fR argument\&. This is an event sink for changes in per socket connection and mailbox (work in progress) states\&.
.PP
\fBThe zmq_ctx_set_monitor() callback function is expected to have this prototype:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
typedef void (zmq_monitor_fn) (void *s, int event, zmq_event_data_t *data);
.fi
.if n \{\
.RE
.\}
.sp
The callback is global (per context), with the socket that triggered the event passed to the handler as well\&. Each event also populates a \fIzmq_event_data_t\fR union with additional metadata which can be used for correlation\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBCaution\fR
.ps -1
.br
.sp
\fIzmq_ctx_set_monitor()\fR is intended for monitoring infrastructure / operations concerns only \- NOT BUSINESS LOGIC\&. An event is a representation of something that happened \- you cannot change the past, but only react to them\&. The implementation is also only concerned with a single session\&. No state of peers, other sessions etc\&. are tracked \- this will only pollute internals and is the responsibility of application authors to either implement or correlate in another datastore\&. Monitor events are exceptional conditions and are thus not directly in the messaging critical path\&. However, still be careful with what you\(cqre doing in the callback function as excess time spent in the handler will block the socket\(cqs application thread\&.
.sp .5v
.RE
.sp
Only tcp and ipc specific transport events are supported in this initial implementation\&.
.sp
Supported events are:
.SS "ZMQ_EVENT_CONNECTED: connection established"
.sp
The \fIZMQ_EVENT_CONNECTED\fR event triggers when a connection has been established to a remote peer\&. This can happen either synchronous or asynchronous\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.connected\&.addr // peer address
data\&.connected\&.fd // socket descriptor
.fi
.if n \{\
.RE
.\}
.sp
.SS "ZMQ_EVENT_CONNECT_DELAYED: synchronous connect failed, it\(cqs being polled"
.sp
The \fIZMQ_EVENT_CONNECT_DELAYED\fR event triggers when an immediate connection attempt is delayed and it\(cqs completion\(cqs being polled for\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.connect_delayed\&.addr // peer address
data\&.connect_delayed\&.err // errno
.fi
.if n \{\
.RE
.\}
.sp
.SS "ZMQ_EVENT_CONNECT_RETRIED: asynchronous connect / reconnection attempt"
.sp
The \fIZMQ_EVENT_CONNECT_RETRIED\fR event triggers when a connection attempt is being handled by reconnect timer\&. The reconnect interval\(cqs recomputed for each attempt\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.connect_retried\&.addr // peer address
data\&.connect_retried\&.interval // computed reconnect interval
.fi
.if n \{\
.RE
.\}
.sp
.SS "ZMQ_EVENT_LISTENING: socket bound to an address, ready to accept connections"
.sp
The \fIZMQ_EVENT_LISTENING\fR event triggers when a socket\(cqs successfully bound to a an interface\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.listening\&.addr //  listen address
data\&.listening\&.fd // socket descriptor
.fi
.if n \{\
.RE
.\}
.sp
.SS "ZMQ_EVENT_BIND_FAILED: socket could not bind to an address"
.sp
The \fIZMQ_EVENT_BIND_FAILED\fR event triggers when a socket could not bind to a given interface\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.bind_failed\&.addr // listen address
data\&.bind_failed\&.err // errno
.fi
.if n \{\
.RE
.\}
.sp
.SS "ZMQ_EVENT_ACCEPTED: connection accepted to bound interface"
.sp
The \fIZMQ_EVENT_ACCEPTED\fR event triggers when a connection from a remote peer has been established with a socket\(cqs listen address\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.accepted\&.addr // listen address
data\&.accepted\&.fd // socket descriptor
.fi
.if n \{\
.RE
.\}
.sp
.SS "ZMQ_EVENT_ACCEPT_FAILED: could not accept client connection"
.sp
The \fIZMQ_EVENT_ACCEPT_FAILED\fR event triggers when a connection attempt to a socket\(cqs bound address fails\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.accept_failed\&.addr // listen address
data\&.accept_failed\&.err // errno
.fi
.if n \{\
.RE
.\}
.sp
.SS "ZMQ_EVENT_CLOSED: connection closed"
.sp
The \fIZMQ_EVENT_CLOSED\fR event triggers when a connection\(cqs underlying descriptor has been closed\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.closed\&.addr // address
data\&.closed\&.fd // socket descriptor
.fi
.if n \{\
.RE
.\}
.sp
.SS "ZMQ_EVENT_CLOSE_FAILED: connection couldn\(cqt be closed"
.sp
The \fIZMQ_EVENT_CLOSE_FAILED\fR event triggers when a descriptor could not be released back to the OS\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.close_failed\&.addr // address
data\&.close_failed\&.err // errno
.fi
.if n \{\
.RE
.\}
.sp
.SS "ZMQ_EVENT_DISCONNECTED: broken session"
.sp
The \fIZMQ_EVENT_DISCONNECTED\fR event triggers when the stream engine (tcp and ipc specific) detects a corrupted / broken session\&.
.PP
\fBCallback metadata:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
data\&.disconnected\&.addr // address
data\&.disconnected\&.fd // socket descriptor
.fi
.if n \{\
.RE
.\}
.sp
.SH "RETURN VALUE"
.sp
The \fIzmq_ctx_set_monitor()\fR function returns a value of 0 or greater if successful\&. Otherwise it returns \-1 and sets \fIerrno\fR to one of the values defined below\&.
.SH "ERRORS"
.PP
\fBEINVAL\fR
.RS 4
The requested callback function
\fImonitor\fR
is invalid\&.
.RE
.SH "EXAMPLE"
.PP
\fBObserving a PUB socket\(cqs connection state\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
void socket_monitor (void *s, int event_, zmq_event_data_t *data_)
{
    switch (event_) {
    case ZMQ_EVENT_LISTENING:
        printf ("Socket bound to %s, socket descriptor is %d\en",
                 data\&.listening\&.addr, data\&.listening\&.fd);
        break;
    case ZMQ_EVENT_ACCEPTED:
        printf ("Accepted connection to %s, socket descriptor is %d\en",
                data\&.accepted\&.addr, data\&.accepted\&.fd);
        break;
    }
}

void *context = zmq_ctx_new ();
int rc = zmq_ctx_set_monitor (context, socket_monitor);
assert (rc == 0);
void *pub = zmq_socket (context, ZMQ_PUB);
assert (pub);
void *sub = zmq_socket (context, ZMQ_SUB);
assert (pub);
rc = zmq_bind (pub, "tcp://127\&.0\&.0\&.1:5560");
assert (rc == 0);
rc = zmq_connect (sub, "tcp://127\&.0\&.0\&.1:5560");
assert (rc == 0);

// Allow a window for socket events as connect can be async
zmq_sleep (1);

rc = zmq_close (pub);
assert (rc == 0);
rc = zmq_close (sub);
assert (rc == 0);

zmq_term (context);
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBzmq\fR(7)
.SH "AUTHORS"
.sp
This 0MQ manual page was written by Lourens Naud\('e <\m[blue]\fBlourens@methodmissing\&.com\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "NOTES"
.IP " 1." 4
lourens@methodmissing.com
.RS 4
\%mailto:lourens@methodmissing.com
.RE
