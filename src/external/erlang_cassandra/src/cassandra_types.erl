%%
%% Autogenerated by Thrift Compiler (0.9.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(cassandra_types).

-include("cassandra_types.hrl").

-export([struct_info/1, struct_info_ext/1]).

struct_info('column') ->
  {struct, [{1, string},
          {2, string},
          {3, i64},
          {4, i32}]}
;

struct_info('superColumn') ->
  {struct, [{1, string},
          {2, {list, {struct, {'cassandra_types', 'column'}}}}]}
;

struct_info('counterColumn') ->
  {struct, [{1, string},
          {2, i64}]}
;

struct_info('counterSuperColumn') ->
  {struct, [{1, string},
          {2, {list, {struct, {'cassandra_types', 'counterColumn'}}}}]}
;

struct_info('columnOrSuperColumn') ->
  {struct, [{1, {struct, {'cassandra_types', 'column'}}},
          {2, {struct, {'cassandra_types', 'superColumn'}}},
          {3, {struct, {'cassandra_types', 'counterColumn'}}},
          {4, {struct, {'cassandra_types', 'counterSuperColumn'}}}]}
;

struct_info('notFoundException') ->
  {struct, []}
;

struct_info('invalidRequestException') ->
  {struct, [{1, string}]}
;

struct_info('unavailableException') ->
  {struct, []}
;

struct_info('timedOutException') ->
  {struct, [{1, i32},
          {2, bool}]}
;

struct_info('authenticationException') ->
  {struct, [{1, string}]}
;

struct_info('authorizationException') ->
  {struct, [{1, string}]}
;

struct_info('schemaDisagreementException') ->
  {struct, []}
;

struct_info('columnParent') ->
  {struct, [{3, string},
          {4, string}]}
;

struct_info('columnPath') ->
  {struct, [{3, string},
          {4, string},
          {5, string}]}
;

struct_info('sliceRange') ->
  {struct, [{1, string},
          {2, string},
          {3, bool},
          {4, i32}]}
;

struct_info('slicePredicate') ->
  {struct, [{1, {list, string}},
          {2, {struct, {'cassandra_types', 'sliceRange'}}}]}
;

struct_info('indexExpression') ->
  {struct, [{1, string},
          {2, i32},
          {3, string}]}
;

struct_info('indexClause') ->
  {struct, [{1, {list, {struct, {'cassandra_types', 'indexExpression'}}}},
          {2, string},
          {3, i32}]}
;

struct_info('keyRange') ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {6, {list, {struct, {'cassandra_types', 'indexExpression'}}}},
          {5, i32}]}
;

struct_info('keySlice') ->
  {struct, [{1, string},
          {2, {list, {struct, {'cassandra_types', 'columnOrSuperColumn'}}}}]}
;

struct_info('keyCount') ->
  {struct, [{1, string},
          {2, i32}]}
;

struct_info('deletion') ->
  {struct, [{1, i64},
          {2, string},
          {3, {struct, {'cassandra_types', 'slicePredicate'}}}]}
;

struct_info('mutation') ->
  {struct, [{1, {struct, {'cassandra_types', 'columnOrSuperColumn'}}},
          {2, {struct, {'cassandra_types', 'deletion'}}}]}
;

struct_info('endpointDetails') ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;

struct_info('tokenRange') ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}},
          {4, {list, string}},
          {5, {list, {struct, {'cassandra_types', 'endpointDetails'}}}}]}
;

struct_info('authenticationRequest') ->
  {struct, [{1, {map, string, string}}]}
;

struct_info('columnDef') ->
  {struct, [{1, string},
          {2, string},
          {3, i32},
          {4, string},
          {5, {map, string, string}}]}
;

struct_info('cfDef') ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {5, string},
          {6, string},
          {8, string},
          {12, double},
          {13, {list, {struct, {'cassandra_types', 'columnDef'}}}},
          {14, i32},
          {15, string},
          {16, i32},
          {17, i32},
          {18, i32},
          {24, bool},
          {26, string},
          {28, string},
          {29, string},
          {30, {map, string, string}},
          {32, {map, string, string}},
          {33, double},
          {34, string},
          {37, double},
          {38, bool},
          {9, double},
          {11, double},
          {19, i32},
          {20, i32},
          {21, i32},
          {22, i32},
          {23, double},
          {25, double},
          {27, string},
          {31, i32}]}
;

struct_info('ksDef') ->
  {struct, [{1, string},
          {2, string},
          {3, {map, string, string}},
          {4, i32},
          {5, {list, {struct, {'cassandra_types', 'cfDef'}}}},
          {6, bool}]}
;

struct_info('cqlRow') ->
  {struct, [{1, string},
          {2, {list, {struct, {'cassandra_types', 'column'}}}}]}
;

struct_info('cqlMetadata') ->
  {struct, [{1, {map, string, string}},
          {2, {map, string, string}},
          {3, string},
          {4, string}]}
;

struct_info('cqlResult') ->
  {struct, [{1, i32},
          {2, {list, {struct, {'cassandra_types', 'cqlRow'}}}},
          {3, i32},
          {4, {struct, {'cassandra_types', 'cqlMetadata'}}}]}
;

struct_info('cqlPreparedResult') ->
  {struct, [{1, i32},
          {2, i32},
          {3, {list, string}},
          {4, {list, string}}]}
;

struct_info('cfSplit') ->
  {struct, [{1, string},
          {2, string},
          {3, i64}]}
;

struct_info('i am a dummy struct') -> undefined.

struct_info_ext('column') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, optional, string, 'value', undefined},
          {3, optional, i64, 'timestamp', undefined},
          {4, optional, i32, 'ttl', undefined}]}
;

struct_info_ext('superColumn') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, {list, {struct, {'cassandra_types', 'column'}}}, 'columns', []}]}
;

struct_info_ext('counterColumn') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, i64, 'value', undefined}]}
;

struct_info_ext('counterSuperColumn') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, {list, {struct, {'cassandra_types', 'counterColumn'}}}, 'columns', []}]}
;

struct_info_ext('columnOrSuperColumn') ->
  {struct, [{1, optional, {struct, {'cassandra_types', 'column'}}, 'column', #column{}},
          {2, optional, {struct, {'cassandra_types', 'superColumn'}}, 'super_column', #superColumn{}},
          {3, optional, {struct, {'cassandra_types', 'counterColumn'}}, 'counter_column', #counterColumn{}},
          {4, optional, {struct, {'cassandra_types', 'counterSuperColumn'}}, 'counter_super_column', #counterSuperColumn{}}]}
;

struct_info_ext('notFoundException') ->
  {struct, []}
;

struct_info_ext('invalidRequestException') ->
  {struct, [{1, required, string, 'why', undefined}]}
;

struct_info_ext('unavailableException') ->
  {struct, []}
;

struct_info_ext('timedOutException') ->
  {struct, [{1, optional, i32, 'acknowledged_by', undefined},
          {2, optional, bool, 'acknowledged_by_batchlog', undefined}]}
;

struct_info_ext('authenticationException') ->
  {struct, [{1, required, string, 'why', undefined}]}
;

struct_info_ext('authorizationException') ->
  {struct, [{1, required, string, 'why', undefined}]}
;

struct_info_ext('schemaDisagreementException') ->
  {struct, []}
;

struct_info_ext('columnParent') ->
  {struct, [{3, required, string, 'column_family', undefined},
          {4, optional, string, 'super_column', undefined}]}
;

struct_info_ext('columnPath') ->
  {struct, [{3, required, string, 'column_family', undefined},
          {4, optional, string, 'super_column', undefined},
          {5, optional, string, 'column', undefined}]}
;

struct_info_ext('sliceRange') ->
  {struct, [{1, required, string, 'start', undefined},
          {2, required, string, 'finish', undefined},
          {3, required, bool, 'reversed', false},
          {4, required, i32, 'count', 100}]}
;

struct_info_ext('slicePredicate') ->
  {struct, [{1, optional, {list, string}, 'column_names', []},
          {2, optional, {struct, {'cassandra_types', 'sliceRange'}}, 'slice_range', #sliceRange{}}]}
;

struct_info_ext('indexExpression') ->
  {struct, [{1, required, string, 'column_name', undefined},
          {2, required, i32, 'op', undefined},
          {3, required, string, 'value', undefined}]}
;

struct_info_ext('indexClause') ->
  {struct, [{1, required, {list, {struct, {'cassandra_types', 'indexExpression'}}}, 'expressions', []},
          {2, required, string, 'start_key', undefined},
          {3, required, i32, 'count', 100}]}
;

struct_info_ext('keyRange') ->
  {struct, [{1, optional, string, 'start_key', undefined},
          {2, optional, string, 'end_key', undefined},
          {3, optional, string, 'start_token', undefined},
          {4, optional, string, 'end_token', undefined},
          {6, optional, {list, {struct, {'cassandra_types', 'indexExpression'}}}, 'row_filter', []},
          {5, required, i32, 'count', 100}]}
;

struct_info_ext('keySlice') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, {list, {struct, {'cassandra_types', 'columnOrSuperColumn'}}}, 'columns', []}]}
;

struct_info_ext('keyCount') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, i32, 'count', undefined}]}
;

struct_info_ext('deletion') ->
  {struct, [{1, optional, i64, 'timestamp', undefined},
          {2, optional, string, 'super_column', undefined},
          {3, optional, {struct, {'cassandra_types', 'slicePredicate'}}, 'predicate', #slicePredicate{}}]}
;

struct_info_ext('mutation') ->
  {struct, [{1, optional, {struct, {'cassandra_types', 'columnOrSuperColumn'}}, 'column_or_supercolumn', #columnOrSuperColumn{}},
          {2, optional, {struct, {'cassandra_types', 'deletion'}}, 'deletion', #deletion{}}]}
;

struct_info_ext('endpointDetails') ->
  {struct, [{1, undefined, string, 'host', undefined},
          {2, undefined, string, 'datacenter', undefined},
          {3, optional, string, 'rack', undefined}]}
;

struct_info_ext('tokenRange') ->
  {struct, [{1, required, string, 'start_token', undefined},
          {2, required, string, 'end_token', undefined},
          {3, required, {list, string}, 'endpoints', []},
          {4, optional, {list, string}, 'rpc_endpoints', []},
          {5, optional, {list, {struct, {'cassandra_types', 'endpointDetails'}}}, 'endpoint_details', []}]}
;

struct_info_ext('authenticationRequest') ->
  {struct, [{1, required, {map, string, string}, 'credentials', dict:new()}]}
;

struct_info_ext('columnDef') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, string, 'validation_class', undefined},
          {3, optional, i32, 'index_type', undefined},
          {4, optional, string, 'index_name', undefined},
          {5, optional, {map, string, string}, 'index_options', dict:new()}]}
;

struct_info_ext('cfDef') ->
  {struct, [{1, required, string, 'keyspace', undefined},
          {2, required, string, 'name', undefined},
          {3, optional, string, 'column_type', "Standard"},
          {5, optional, string, 'comparator_type', "BytesType"},
          {6, optional, string, 'subcomparator_type', undefined},
          {8, optional, string, 'comment', undefined},
          {12, optional, double, 'read_repair_chance', undefined},
          {13, optional, {list, {struct, {'cassandra_types', 'columnDef'}}}, 'column_metadata', []},
          {14, optional, i32, 'gc_grace_seconds', undefined},
          {15, optional, string, 'default_validation_class', undefined},
          {16, optional, i32, 'id', undefined},
          {17, optional, i32, 'min_compaction_threshold', undefined},
          {18, optional, i32, 'max_compaction_threshold', undefined},
          {24, optional, bool, 'replicate_on_write', undefined},
          {26, optional, string, 'key_validation_class', undefined},
          {28, optional, string, 'key_alias', undefined},
          {29, optional, string, 'compaction_strategy', undefined},
          {30, optional, {map, string, string}, 'compaction_strategy_options', dict:new()},
          {32, optional, {map, string, string}, 'compression_options', dict:new()},
          {33, optional, double, 'bloom_filter_fp_chance', undefined},
          {34, optional, string, 'caching', "keys_only"},
          {37, optional, double, 'dclocal_read_repair_chance', 0},
          {38, optional, bool, 'populate_io_cache_on_flush', undefined},
          {9, optional, double, 'row_cache_size', undefined},
          {11, optional, double, 'key_cache_size', undefined},
          {19, optional, i32, 'row_cache_save_period_in_seconds', undefined},
          {20, optional, i32, 'key_cache_save_period_in_seconds', undefined},
          {21, optional, i32, 'memtable_flush_after_mins', undefined},
          {22, optional, i32, 'memtable_throughput_in_mb', undefined},
          {23, optional, double, 'memtable_operations_in_millions', undefined},
          {25, optional, double, 'merge_shards_chance', undefined},
          {27, optional, string, 'row_cache_provider', undefined},
          {31, optional, i32, 'row_cache_keys_to_save', undefined}]}
;

struct_info_ext('ksDef') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, string, 'strategy_class', undefined},
          {3, optional, {map, string, string}, 'strategy_options', dict:new()},
          {4, optional, i32, 'replication_factor', undefined},
          {5, required, {list, {struct, {'cassandra_types', 'cfDef'}}}, 'cf_defs', []},
          {6, optional, bool, 'durable_writes', true}]}
;

struct_info_ext('cqlRow') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, {list, {struct, {'cassandra_types', 'column'}}}, 'columns', []}]}
;

struct_info_ext('cqlMetadata') ->
  {struct, [{1, required, {map, string, string}, 'name_types', dict:new()},
          {2, required, {map, string, string}, 'value_types', dict:new()},
          {3, required, string, 'default_name_type', undefined},
          {4, required, string, 'default_value_type', undefined}]}
;

struct_info_ext('cqlResult') ->
  {struct, [{1, required, i32, 'type', undefined},
          {2, optional, {list, {struct, {'cassandra_types', 'cqlRow'}}}, 'rows', []},
          {3, optional, i32, 'num', undefined},
          {4, optional, {struct, {'cassandra_types', 'cqlMetadata'}}, 'schema', #cqlMetadata{}}]}
;

struct_info_ext('cqlPreparedResult') ->
  {struct, [{1, required, i32, 'itemId', undefined},
          {2, required, i32, 'count', undefined},
          {3, optional, {list, string}, 'variable_types', []},
          {4, optional, {list, string}, 'variable_names', []}]}
;

struct_info_ext('cfSplit') ->
  {struct, [{1, required, string, 'start_token', undefined},
          {2, required, string, 'end_token', undefined},
          {3, required, i64, 'row_count', undefined}]}
;

struct_info_ext('i am a dummy struct') -> undefined.

